# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: jobupload.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='jobupload.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0fjobupload.proto\"\x1d\n\nparameters\x12\x0f\n\x07\x63ontent\x18\x01 \x01(\t\"\x17\n\x04line\x12\x0f\n\x07\x63ontent\x18\x01 \x01(\t\"\x19\n\x06Status\x12\x0f\n\x07message\x18\x01 \x01(\t2J\n\tJobUpload\x12\x1f\n\x05param\x12\x0b.parameters\x1a\x07.Status\"\x00\x12\x1c\n\x06upload\x12\x05.line\x1a\x07.Status\"\x00(\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PARAMETERS = _descriptor.Descriptor(
  name='parameters',
  full_name='parameters',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content', full_name='parameters.content', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=19,
  serialized_end=48,
)


_LINE = _descriptor.Descriptor(
  name='line',
  full_name='line',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content', full_name='line.content', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=50,
  serialized_end=73,
)


_STATUS = _descriptor.Descriptor(
  name='Status',
  full_name='Status',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='Status.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=75,
  serialized_end=100,
)

DESCRIPTOR.message_types_by_name['parameters'] = _PARAMETERS
DESCRIPTOR.message_types_by_name['line'] = _LINE
DESCRIPTOR.message_types_by_name['Status'] = _STATUS

parameters = _reflection.GeneratedProtocolMessageType('parameters', (_message.Message,), dict(
  DESCRIPTOR = _PARAMETERS,
  __module__ = 'jobupload_pb2'
  # @@protoc_insertion_point(class_scope:parameters)
  ))
_sym_db.RegisterMessage(parameters)

line = _reflection.GeneratedProtocolMessageType('line', (_message.Message,), dict(
  DESCRIPTOR = _LINE,
  __module__ = 'jobupload_pb2'
  # @@protoc_insertion_point(class_scope:line)
  ))
_sym_db.RegisterMessage(line)

Status = _reflection.GeneratedProtocolMessageType('Status', (_message.Message,), dict(
  DESCRIPTOR = _STATUS,
  __module__ = 'jobupload_pb2'
  # @@protoc_insertion_point(class_scope:Status)
  ))
_sym_db.RegisterMessage(Status)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class JobUploadStub(object):
  """The FileTransfer service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.param = channel.unary_unary(
        '/JobUpload/param',
        request_serializer=parameters.SerializeToString,
        response_deserializer=Status.FromString,
        )
    self.upload = channel.stream_unary(
        '/JobUpload/upload',
        request_serializer=line.SerializeToString,
        response_deserializer=Status.FromString,
        )


class JobUploadServicer(object):
  """The FileTransfer service definition.
  """

  def param(self, request, context):
    """pass parameters
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def upload(self, request_iterator, context):
    """upload a file
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_JobUploadServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'param': grpc.unary_unary_rpc_method_handler(
          servicer.param,
          request_deserializer=parameters.FromString,
          response_serializer=Status.SerializeToString,
      ),
      'upload': grpc.stream_unary_rpc_method_handler(
          servicer.upload,
          request_deserializer=line.FromString,
          response_serializer=Status.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'JobUpload', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaJobUploadServicer(object):
  """The FileTransfer service definition.
  """
  def param(self, request, context):
    """pass parameters
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def upload(self, request_iterator, context):
    """upload a file
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaJobUploadStub(object):
  """The FileTransfer service definition.
  """
  def param(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """pass parameters
    """
    raise NotImplementedError()
  param.future = None
  def upload(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
    """upload a file
    """
    raise NotImplementedError()
  upload.future = None


def beta_create_JobUpload_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('JobUpload', 'param'): parameters.FromString,
    ('JobUpload', 'upload'): line.FromString,
  }
  response_serializers = {
    ('JobUpload', 'param'): Status.SerializeToString,
    ('JobUpload', 'upload'): Status.SerializeToString,
  }
  method_implementations = {
    ('JobUpload', 'param'): face_utilities.unary_unary_inline(servicer.param),
    ('JobUpload', 'upload'): face_utilities.stream_unary_inline(servicer.upload),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_JobUpload_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('JobUpload', 'param'): parameters.SerializeToString,
    ('JobUpload', 'upload'): line.SerializeToString,
  }
  response_deserializers = {
    ('JobUpload', 'param'): Status.FromString,
    ('JobUpload', 'upload'): Status.FromString,
  }
  cardinalities = {
    'param': cardinality.Cardinality.UNARY_UNARY,
    'upload': cardinality.Cardinality.STREAM_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'JobUpload', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
